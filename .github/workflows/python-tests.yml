name: Python Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with Ruff
      run: ruff check .

  type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy pydantic neomodel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Type check with MyPy
      run: mypy --ignore-missing-imports converter.py

  test:
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    services:
      neo4j:
        image: neo4j:4.4
        env:
          NEO4J_AUTH: neo4j/password
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov hypothesis neomodel pydantic
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run unit tests
      id: unit-tests
      run: |
        pytest -xvs unit_tests/
      continue-on-error: false

    - name: Run hypothesis tests
      id: hypothesis-tests
      run: |
        pytest -xvs tests_hypothesis/all_tests.py
      # Only run hypothesis tests if unit tests pass
      if: success() && steps.unit-tests.outcome == 'success'

    - name: Generate coverage report
      id: coverage
      run: |
        pytest --cov=converter --cov-report=xml unit_tests/ tests_hypothesis/
      if: success()

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false